# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../sandbox_manager.gni")

sandbox_manager_service_src = [
  "../main/cpp/src/service/sandbox_manager_service.cpp",
  "../main/cpp/src/service/sandbox_manager_stub.cpp",
  "../main/cpp/src/sensitive/sandbox_manager_event_subscriber.cpp",
  "../main/cpp/src/service/policy_info_manager.cpp",
  "../main/cpp/src/database/policy_field_const.cpp",
  "../main/cpp/src/database/sandbox_manager_db.cpp",
]

ohos_unittest("libsandbox_manager_service_standard_test") {
  subsystem_name = "accesscontrol"
  part_name = "sandbox_manager"
  module_out_path = part_name + "/" + part_name

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${sandbox_manager_path}/frameworks/sandbox_manager/include",
    "${sandbox_manager_path}/frameworks/common/include",
    "${sandbox_manager_path}/services/common/database/include",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/database",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/sensitive",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/service",
  ]

  sources = [
    "unittest/policy_info_manager_test.cpp",
    "unittest/sandbox_manager_db_test.cpp",
    "unittest/sandbox_manager_service_test.cpp",
  ]
  sources += sandbox_manager_service_src

  configs = [ "${sandbox_manager_path}/config:coverage_flags" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  deps = [
    "${sandbox_manager_path}/frameworks/sandbox_manager:sandbox_manager_communication_adapter_cxx",
    "${sandbox_manager_path}/services/common:sandbox_manager_service_common",
    "${sandbox_manager_path}/services/sandbox_manager:sandbox_manager_service",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "sqlite:sqlite",
  ]
}

ohos_unittest("libsandbox_manager_sqlite_mock_test") {
  subsystem_name = "accesscontrol"
  part_name = "sandbox_manager"
  module_out_path = part_name + "/" + part_name

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${sandbox_manager_path}/frameworks/common/include",
    "${sandbox_manager_path}/services/common/database/include",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/database",
    "mock/include",
  ]

  sources = [
    "${sandbox_manager_path}/services/common/database/src/generic_values.cpp",
    "${sandbox_manager_path}/services/common/database/src/sqlite_helper.cpp",
    "${sandbox_manager_path}/services/common/database/src/statement.cpp",
    "${sandbox_manager_path}/services/common/database/src/variant_value.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/database/policy_field_const.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/database/sandbox_manager_db.cpp",
    "mock/src/sqlite3sym.cpp",
    "mock/src/sqlite_mock_test.cpp",
  ]

  deps = [
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  configs = [ "${sandbox_manager_path}/config:coverage_flags" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":libsandbox_manager_service_standard_test",
    ":libsandbox_manager_sqlite_mock_test",
  ]
}
