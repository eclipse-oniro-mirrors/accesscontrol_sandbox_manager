# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/features.gni")
import("//build/test.gni")
import("../../../../../sandbox_manager.gni")

ohos_fuzztest("SetPolicyStubFuzzTest") {
  module_out_path = module_output_path_interface_sandbox
  fuzz_config_file = "."

  include_dirs = [
    "${sandbox_manager_path}/frameworks/sandbox_manager/include",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/service",
    "../../../common",
    "//base/security/access_token/interfaces/innerkits/accesstoken:libaccesstoken_sdk",
    "//base/security/access_token/interfaces/innerkits/token_setproc:libtoken_setproc",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [
    "../../../common/alloc_token.cpp",
    "setpolicystub_fuzzer.cpp",
  ]

  deps = [
    "${sandbox_manager_path}/frameworks/common:sandbox_manager_common_cxx",
    "${sandbox_manager_path}/frameworks/sandbox_manager:sandbox_manager_communication_adapter_cxx",
    "${sandbox_manager_path}/interfaces/innerkits/sandbox_manager:libsandbox_manager_sdk",
    "${sandbox_manager_path}/services/common:sandbox_manager_service_common",
    "${sandbox_manager_path}/services/sandbox_manager:sandbox_manager_service",
    "//third_party/sqlite:sqlite",
  ]

  configs = [ "${sandbox_manager_path}/config:coverage_flags" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  include_dirs += [
    "${sandbox_manager_path}/frameworks/common/include",
    "${sandbox_manager_path}/frameworks/sandbox_manager/include",
    "${sandbox_manager_path}/interfaces/innerkits/sandbox_manager/include",
    "${sandbox_manager_path}/services/common/database/include",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/database",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/include/service",
    "//third_party/sqlite/include/",
  ]

  sources += [
    "${sandbox_manager_path}/services/common/database/src/generic_values.cpp",
    "${sandbox_manager_path}/services/common/database/src/sqlite_helper.cpp",
    "${sandbox_manager_path}/services/common/database/src/statement.cpp",
    "${sandbox_manager_path}/services/common/database/src/variant_value.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/database/policy_field_const.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/database/sandbox_manager_db.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/service/package_uninstall_observer.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/service/policy_info_manager.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/service/sandbox_manager_service.cpp",
    "${sandbox_manager_path}/services/sandbox_manager/main/cpp/src/service/sandbox_manager_stub.cpp",
  ]

  external_deps += [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
}
